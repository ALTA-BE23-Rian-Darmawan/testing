// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	todos "BE23TODO/features/Todos"

	mock "github.com/stretchr/testify/mock"
)

// ServiceTodosInterface is an autogenerated mock type for the ServiceTodosInterface type
type ServiceTodosInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *ServiceTodosInterface) Create(todo todos.TodosEntity) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todos.TodosEntity) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, userid
func (_m *ServiceTodosInterface) Delete(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *ServiceTodosInterface) GetById(id uint) (*todos.TodosEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *todos.TodosEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*todos.TodosEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *todos.TodosEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.TodosEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: id
func (_m *ServiceTodosInterface) GetByUserId(id uint) ([]todos.TodosEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 []todos.TodosEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]todos.TodosEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []todos.TodosEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todos.TodosEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, userid, todo
func (_m *ServiceTodosInterface) Update(id uint, userid uint, todo todos.TodosEntity) error {
	ret := _m.Called(id, userid, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, todos.TodosEntity) error); ok {
		r0 = rf(id, userid, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceTodosInterface creates a new instance of ServiceTodosInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceTodosInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceTodosInterface {
	mock := &ServiceTodosInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
