// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	todos "BE23TODO/features/Todos"

	mock "github.com/stretchr/testify/mock"
)

// DataTodosInterface is an autogenerated mock type for the DataTodosInterface type
type DataTodosInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *DataTodosInterface) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: todo
func (_m *DataTodosInterface) Insert(todo todos.TodosEntity) error {
	ret := _m.Called(todo)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(todos.TodosEntity) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectById provides a mock function with given fields: id
func (_m *DataTodosInterface) SelectById(id uint) (*todos.TodosEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectById")
	}

	var r0 *todos.TodosEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*todos.TodosEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *todos.TodosEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todos.TodosEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByUserId provides a mock function with given fields: id
func (_m *DataTodosInterface) SelectByUserId(id uint) ([]todos.TodosEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectByUserId")
	}

	var r0 []todos.TodosEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]todos.TodosEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []todos.TodosEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todos.TodosEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, todo
func (_m *DataTodosInterface) Update(id uint, todo todos.TodosEntity) error {
	ret := _m.Called(id, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, todos.TodosEntity) error); ok {
		r0 = rf(id, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataTodosInterface creates a new instance of DataTodosInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataTodosInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataTodosInterface {
	mock := &DataTodosInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
